# Infrastructure CI/CD Pipeline
# Manages Terraform Cloud runs and infrastructure deployment

name: Infrastructure

on:
  push:
    branches: [main]
    paths: ['infrastructure/**']
  pull_request:
    branches: [main]
    paths: ['infrastructure/**']
  workflow_dispatch:

env:
  TF_CLOUD_ORGANIZATION: "Ink-and-Ivy"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: "production"

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: infrastructure
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.12"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -var-file="environments/production.tfvars"
        continue-on-error: true
      
      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var-file="environments/production.tfvars"
      
      - name: Output Infrastructure URLs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "## üöÄ Infrastructure Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: $(terraform output -raw frontend_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: $(terraform output -raw backend_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **Sanity Studio**: $(terraform output -raw sanity_studio_url)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify all services are healthy" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure Stripe webhooks" >> $GITHUB_STEP_SUMMARY
          echo "3. Set up Sanity Studio content" >> $GITHUB_STEP_SUMMARY